   0  $accept : start $end

   1  start : program

   2  program : program decl
   3          | decl

   4  funcdecl : FUNC NAME '(' funcargs ')' body

   5  funcargs :
   6           | NAME
   7           | funcargs ',' NAME

   8  vardecl : VAR NAME EQUALS expr

   9  expr : RETURN expr
  10       | NAME EQUALS expr
  11       | orexpr

  12  orexpr : andexpr
  13         | orexpr OR andexpr

  14  andexpr : notexpr
  15          | andexpr AND notexpr

  16  notexpr : opexpr
  17          | NOT notexpr

  18  opexpr : smallexpr
  19         | opexpr OPNAME1 opexpr
  20         | opexpr OPNAME2 opexpr
  21         | opexpr OPNAME3 opexpr

  22  smallexpr : NAME
  23            | LITERAL
  24            | '(' expr ')'
  25            | ifexpr

  26  decl : funcdecl ';'
  27       | vardecl ';'
  28       | expr ';'

  29  multidecl : multidecl decl
  30            | decl

  31  ifexpr : IF '(' expr ')' body

  32  body : '{' multidecl '}'

state 0
	$accept : . start $end  (0)

	FUNC  shift 1
	RETURN  shift 2
	IF  shift 3
	VAR  shift 4
	NAME  shift 5
	LITERAL  shift 6
	NOT  shift 7
	'('  shift 8
	.  error

	start  goto 9
	program  goto 10
	decl  goto 11
	funcdecl  goto 12
	vardecl  goto 13
	expr  goto 14
	orexpr  goto 15
	andexpr  goto 16
	notexpr  goto 17
	opexpr  goto 18
	smallexpr  goto 19
	ifexpr  goto 20


state 1
	funcdecl : FUNC . NAME '(' funcargs ')' body  (4)

	NAME  shift 21
	.  error


state 2
	expr : RETURN . expr  (9)

	RETURN  shift 2
	IF  shift 3
	NAME  shift 5
	LITERAL  shift 6
	NOT  shift 7
	'('  shift 8
	.  error

	expr  goto 22
	orexpr  goto 15
	andexpr  goto 16
	notexpr  goto 17
	opexpr  goto 18
	smallexpr  goto 19
	ifexpr  goto 20


state 3
	ifexpr : IF . '(' expr ')' body  (31)

	'('  shift 23
	.  error


state 4
	vardecl : VAR . NAME EQUALS expr  (8)

	NAME  shift 24
	.  error


state 5
	expr : NAME . EQUALS expr  (10)
	smallexpr : NAME .  (22)

	EQUALS  shift 25
	OPNAME1  reduce 22
	OPNAME2  reduce 22
	OPNAME3  reduce 22
	OR  reduce 22
	AND  reduce 22
	')'  reduce 22
	';'  reduce 22


state 6
	smallexpr : LITERAL .  (23)

	.  reduce 23


state 7
	notexpr : NOT . notexpr  (17)

	IF  shift 3
	NAME  shift 26
	LITERAL  shift 6
	NOT  shift 7
	'('  shift 8
	.  error

	notexpr  goto 27
	opexpr  goto 18
	smallexpr  goto 19
	ifexpr  goto 20


state 8
	smallexpr : '(' . expr ')'  (24)

	RETURN  shift 2
	IF  shift 3
	NAME  shift 5
	LITERAL  shift 6
	NOT  shift 7
	'('  shift 8
	.  error

	expr  goto 28
	orexpr  goto 15
	andexpr  goto 16
	notexpr  goto 17
	opexpr  goto 18
	smallexpr  goto 19
	ifexpr  goto 20


state 9
	$accept : start . $end  (0)

	$end  accept


state 10
	start : program .  (1)
	program : program . decl  (2)

	FUNC  shift 1
	RETURN  shift 2
	IF  shift 3
	VAR  shift 4
	NAME  shift 5
	LITERAL  shift 6
	NOT  shift 7
	'('  shift 8
	$end  reduce 1

	decl  goto 29
	funcdecl  goto 12
	vardecl  goto 13
	expr  goto 14
	orexpr  goto 15
	andexpr  goto 16
	notexpr  goto 17
	opexpr  goto 18
	smallexpr  goto 19
	ifexpr  goto 20


state 11
	program : decl .  (3)

	.  reduce 3


state 12
	decl : funcdecl . ';'  (26)

	';'  shift 30
	.  error


state 13
	decl : vardecl . ';'  (27)

	';'  shift 31
	.  error


state 14
	decl : expr . ';'  (28)

	';'  shift 32
	.  error


state 15
	expr : orexpr .  (11)
	orexpr : orexpr . OR andexpr  (13)

	OR  shift 33
	')'  reduce 11
	';'  reduce 11


state 16
	orexpr : andexpr .  (12)
	andexpr : andexpr . AND notexpr  (15)

	AND  shift 34
	OR  reduce 12
	')'  reduce 12
	';'  reduce 12


state 17
	andexpr : notexpr .  (14)

	.  reduce 14


state 18
	notexpr : opexpr .  (16)
	opexpr : opexpr . OPNAME1 opexpr  (19)
	opexpr : opexpr . OPNAME2 opexpr  (20)
	opexpr : opexpr . OPNAME3 opexpr  (21)

	OPNAME1  shift 35
	OPNAME2  shift 36
	OPNAME3  shift 37
	OR  reduce 16
	AND  reduce 16
	')'  reduce 16
	';'  reduce 16


state 19
	opexpr : smallexpr .  (18)

	.  reduce 18


state 20
	smallexpr : ifexpr .  (25)

	.  reduce 25


state 21
	funcdecl : FUNC NAME . '(' funcargs ')' body  (4)

	'('  shift 38
	.  error


state 22
	expr : RETURN expr .  (9)

	.  reduce 9


state 23
	ifexpr : IF '(' . expr ')' body  (31)

	RETURN  shift 2
	IF  shift 3
	NAME  shift 5
	LITERAL  shift 6
	NOT  shift 7
	'('  shift 8
	.  error

	expr  goto 39
	orexpr  goto 15
	andexpr  goto 16
	notexpr  goto 17
	opexpr  goto 18
	smallexpr  goto 19
	ifexpr  goto 20


state 24
	vardecl : VAR NAME . EQUALS expr  (8)

	EQUALS  shift 40
	.  error


state 25
	expr : NAME EQUALS . expr  (10)

	RETURN  shift 2
	IF  shift 3
	NAME  shift 5
	LITERAL  shift 6
	NOT  shift 7
	'('  shift 8
	.  error

	expr  goto 41
	orexpr  goto 15
	andexpr  goto 16
	notexpr  goto 17
	opexpr  goto 18
	smallexpr  goto 19
	ifexpr  goto 20


state 26
	smallexpr : NAME .  (22)

	.  reduce 22


state 27
	notexpr : NOT notexpr .  (17)

	.  reduce 17


state 28
	smallexpr : '(' expr . ')'  (24)

	')'  shift 42
	.  error


state 29
	program : program decl .  (2)

	.  reduce 2


state 30
	decl : funcdecl ';' .  (26)

	.  reduce 26


state 31
	decl : vardecl ';' .  (27)

	.  reduce 27


state 32
	decl : expr ';' .  (28)

	.  reduce 28


state 33
	orexpr : orexpr OR . andexpr  (13)

	IF  shift 3
	NAME  shift 26
	LITERAL  shift 6
	NOT  shift 7
	'('  shift 8
	.  error

	andexpr  goto 43
	notexpr  goto 17
	opexpr  goto 18
	smallexpr  goto 19
	ifexpr  goto 20


state 34
	andexpr : andexpr AND . notexpr  (15)

	IF  shift 3
	NAME  shift 26
	LITERAL  shift 6
	NOT  shift 7
	'('  shift 8
	.  error

	notexpr  goto 44
	opexpr  goto 18
	smallexpr  goto 19
	ifexpr  goto 20


state 35
	opexpr : opexpr OPNAME1 . opexpr  (19)

	IF  shift 3
	NAME  shift 26
	LITERAL  shift 6
	'('  shift 8
	.  error

	opexpr  goto 45
	smallexpr  goto 19
	ifexpr  goto 20


state 36
	opexpr : opexpr OPNAME2 . opexpr  (20)

	IF  shift 3
	NAME  shift 26
	LITERAL  shift 6
	'('  shift 8
	.  error

	opexpr  goto 46
	smallexpr  goto 19
	ifexpr  goto 20


state 37
	opexpr : opexpr OPNAME3 . opexpr  (21)

	IF  shift 3
	NAME  shift 26
	LITERAL  shift 6
	'('  shift 8
	.  error

	opexpr  goto 47
	smallexpr  goto 19
	ifexpr  goto 20


state 38
	funcdecl : FUNC NAME '(' . funcargs ')' body  (4)
	funcargs : .  (5)

	NAME  shift 48
	')'  reduce 5
	','  reduce 5

	funcargs  goto 49


state 39
	ifexpr : IF '(' expr . ')' body  (31)

	')'  shift 50
	.  error


state 40
	vardecl : VAR NAME EQUALS . expr  (8)

	RETURN  shift 2
	IF  shift 3
	NAME  shift 5
	LITERAL  shift 6
	NOT  shift 7
	'('  shift 8
	.  error

	expr  goto 51
	orexpr  goto 15
	andexpr  goto 16
	notexpr  goto 17
	opexpr  goto 18
	smallexpr  goto 19
	ifexpr  goto 20


state 41
	expr : NAME EQUALS expr .  (10)

	.  reduce 10


state 42
	smallexpr : '(' expr ')' .  (24)

	.  reduce 24


state 43
	orexpr : orexpr OR andexpr .  (13)
	andexpr : andexpr . AND notexpr  (15)

	AND  shift 34
	OR  reduce 13
	')'  reduce 13
	';'  reduce 13


state 44
	andexpr : andexpr AND notexpr .  (15)

	.  reduce 15


state 45
	opexpr : opexpr . OPNAME1 opexpr  (19)
	opexpr : opexpr OPNAME1 opexpr .  (19)
	opexpr : opexpr . OPNAME2 opexpr  (20)
	opexpr : opexpr . OPNAME3 opexpr  (21)

	OPNAME2  shift 36
	OPNAME3  shift 37
	OPNAME1  reduce 19
	OR  reduce 19
	AND  reduce 19
	')'  reduce 19
	';'  reduce 19


state 46
	opexpr : opexpr . OPNAME1 opexpr  (19)
	opexpr : opexpr . OPNAME2 opexpr  (20)
	opexpr : opexpr OPNAME2 opexpr .  (20)
	opexpr : opexpr . OPNAME3 opexpr  (21)

	OPNAME3  shift 37
	OPNAME1  reduce 20
	OPNAME2  reduce 20
	OR  reduce 20
	AND  reduce 20
	')'  reduce 20
	';'  reduce 20


state 47
	opexpr : opexpr . OPNAME1 opexpr  (19)
	opexpr : opexpr . OPNAME2 opexpr  (20)
	opexpr : opexpr . OPNAME3 opexpr  (21)
	opexpr : opexpr OPNAME3 opexpr .  (21)

	.  reduce 21


state 48
	funcargs : NAME .  (6)

	.  reduce 6


state 49
	funcdecl : FUNC NAME '(' funcargs . ')' body  (4)
	funcargs : funcargs . ',' NAME  (7)

	')'  shift 52
	','  shift 53
	.  error


state 50
	ifexpr : IF '(' expr ')' . body  (31)

	'{'  shift 54
	.  error

	body  goto 55


state 51
	vardecl : VAR NAME EQUALS expr .  (8)

	.  reduce 8


state 52
	funcdecl : FUNC NAME '(' funcargs ')' . body  (4)

	'{'  shift 54
	.  error

	body  goto 56


state 53
	funcargs : funcargs ',' . NAME  (7)

	NAME  shift 57
	.  error


state 54
	body : '{' . multidecl '}'  (32)

	FUNC  shift 1
	RETURN  shift 2
	IF  shift 3
	VAR  shift 4
	NAME  shift 5
	LITERAL  shift 6
	NOT  shift 7
	'('  shift 8
	.  error

	multidecl  goto 58
	decl  goto 59
	funcdecl  goto 12
	vardecl  goto 13
	expr  goto 14
	orexpr  goto 15
	andexpr  goto 16
	notexpr  goto 17
	opexpr  goto 18
	smallexpr  goto 19
	ifexpr  goto 20


state 55
	ifexpr : IF '(' expr ')' body .  (31)

	.  reduce 31


state 56
	funcdecl : FUNC NAME '(' funcargs ')' body .  (4)

	.  reduce 4


state 57
	funcargs : funcargs ',' NAME .  (7)

	.  reduce 7


state 58
	multidecl : multidecl . decl  (29)
	body : '{' multidecl . '}'  (32)

	FUNC  shift 1
	RETURN  shift 2
	IF  shift 3
	VAR  shift 4
	NAME  shift 5
	LITERAL  shift 6
	NOT  shift 7
	'('  shift 8
	'}'  shift 60
	.  error

	decl  goto 61
	funcdecl  goto 12
	vardecl  goto 13
	expr  goto 14
	orexpr  goto 15
	andexpr  goto 16
	notexpr  goto 17
	opexpr  goto 18
	smallexpr  goto 19
	ifexpr  goto 20


state 59
	multidecl : decl .  (30)

	.  reduce 30


state 60
	body : '{' multidecl '}' .  (32)

	.  reduce 32


state 61
	multidecl : multidecl decl .  (29)

	.  reduce 29


26 terminals, 16 nonterminals
33 grammar rules, 62 states
